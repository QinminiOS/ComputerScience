//
//  08.m
//  算法
//
//  Created by qinmin on 2017/10/19.
//  Copyright © 2017年 qinmin. All rights reserved.
//

#import <Foundation/Foundation.h>

/**
 *
 *    请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。例如把9表示成二进制1001，有2位1。因此如果输入9，该函数输出2。
 *
 **/



/**
 循环让(n - 1) & n。如果n的二进制表示中有k个1，那么这个方法只需要循环k次即可。**其原理是不断清除n的二进制表示中最右边的1，同时累加计数器，直至n为0。**因为从二进制的角度讲，n相当于在n - 1的最低位加上1。举个例子，8（1000）= 7（0111）+ 1（0001），所以8 & 7 = （1000）&（0111）= 0（0000），清除了8最右边的1（其实就是最高位的1，因为8的二进制中只有一个1）。再比如7（0111）= 6（0110）+ 1（0001），所以7 & 6 = （0111）&（0110）= 6（0110），清除了7的二进制表示中最右边的1（也就是最低位的1）。
 */
int count(int key)
{
    int m = 0;
    while (key) {
        m++;
        key = key & (key-1);
    }
    
    return m;
}

//int main(int argc, const char * argv[])
//{
//    printf("%d\n", count(0x1F));
//    
//    return 0;
//}

